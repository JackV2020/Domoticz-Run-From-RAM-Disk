This is a procedure to put domoticz on a ram drive on a Raspberry Pi.

# Start with a running domoticz system and logon as pi.

# Stop domoticz :

sudo systemctl stop domoticz

# Make the current domoticz folder the disk resident copy :

mv domoticz Domoticz_disk_copy

# Just for during this setup, in case something goed wrong, better safe than sorry :-)

sudo rsync -qa  Domoticz_disk_copy/ Domoticz_disk_copy_bck/

# Create a mountpoint for a ram disk which has the same name as the domoticz original installation folder :

mkdir domoticz

# Add the ram disk mount in /etc/fstab

sudo geany /etc/fstab &

Add the next 4 lines :
#
# Mount a ramdisk for domoticz
#
tmpfs	        /home/pi/domoticz        tmpfs   noatime,nodev,nosuid,size=200M,uid=pi,gid=pi 0 0

# Note that although the ramdisk is set up to be 200 MB it will only use as much as needed, the 200M is a limit

# Mount the ramdisk

sudo mount -a

#Check if it there :

df -h | grep /home/pi/domoticz

# and see : tmpfs               200M     0  200M   0% /home/pi/domoticz

# Change the service file domoticz.sh to make use of the ramdisk and the Domoticz_disk_copy.

sudo geany /etc/init.d/domoticz.sh ( or use any other editor )

# Replace the contents by the section between --------- lines below
# This is the original file with some marked additions.
# when it is replaced by an upgrade you need to replace it by this script again
# I upgraded several times and the script did not change.
# Make sure to check it after every upgrade.
-----------------------------------------------------------------------------------------

#! /bin/sh
### BEGIN INIT INFO
# Provides:          domoticz
# Required-Start:    $network $remote_fs $syslog $time
# Required-Stop:     $network $remote_fs $syslog
# Default-Start:     2 3 4 5
# Default-Stop:      0 1 6
# Short-Description: Home Automation System
# Description:       This daemon will start the Domoticz Home Automation System
### END INIT INFO

# Do NOT "set -e"

PATH=/sbin:/bin:/usr/sbin:/usr/bin:/usr/local/bin
DESC="Domoticz Home Automation System"
# JVe additions 0 start
DISKFOLDER=/home/pi/Domoticz_disk_copy/
RAMFOLDER=/home/pi/domoticz/
# JVe additions 0 end

NAME=domoticz
USERNAME=pi
PIDFILE=/var/run/$NAME.pid
SCRIPTNAME=/etc/init.d/$NAME

DAEMON=/home/pi/domoticz/$NAME
DAEMON_ARGS="-daemon"
#DAEMON_ARGS="$DAEMON_ARGS -daemonname $NAME -pidfile $PIDFILE"
DAEMON_ARGS="$DAEMON_ARGS -www 8080"
DAEMON_ARGS="$DAEMON_ARGS -sslwww 444"
#DAEMON_ARGS="$DAEMON_ARGS -log /tmp/domoticz.txt"
#DAEMON_ARGS="$DAEMON_ARGS -syslog"

# Exit if the package is not installed
# JVe additions 1 start
#[ -x "$DAEMON" ] || exit 0
# JVe additions 1 end

# Load the VERBOSE setting and other rcS variables
. /lib/init/vars.sh

# Define LSB log_* functions.
# Depend on lsb-base (>= 3.2-14) to ensure that this file is present
# and status_of_proc is working.
. /lib/lsb/init-functions

pidof_domoticz() {
    # if there is actually a domoticz process whose pid is in PIDFILE,
    # print it and return 0.
    if [ -e "$PIDFILE" ]; then
        if pidof domoticz | tr ' ' '\n' | grep -w $(cat $PIDFILE); then
            return 0
        fi
    fi
    return 1
}

#
# Function that starts the daemon/service
#
do_start()
{
        # Return
        #   0 if daemon has been started
        #   1 if daemon was already running
        #   2 if daemon could not be started
        start-stop-daemon --chuid $USERNAME --start --quiet --pidfile $PIDFILE --exec $DAEMON --test > /dev/null \
                || return 1
        start-stop-daemon --start --quiet --pidfile $PIDFILE --exec $DAEMON -- \
                $DAEMON_ARGS \
                || return 2
}

#
# Function that stops the daemon/service
#
do_stop()
{
        # Return
        #   0 if daemon has been stopped
        #   1 if daemon was already stopped
        #   2 if daemon could not be stopped
        #   other if a failure occurred
        start-stop-daemon --stop --quiet --retry=TERM/30/KILL/5 --pidfile $PIDFILE --name $NAME
        RETVAL="$?"
        [ "$RETVAL" = 2 ] && return 2
        # Wait for children to finish too if this is a daemon that forks
        # and if the daemon is only ever run from this initscript.
        # If the above conditions are not satisfied then add some other code
        # that waits for the process to drop all resources that could be
        # needed by services started subsequently.  A last resort is to
        # sleep for some time.
        start-stop-daemon --stop --quiet --oknodo --retry=0/30/KILL/5 --exec $DAEMON
        [ "$?" = 2 ] && return 2
        # Many daemons don't delete their pidfiles when they exit.
        rm -f $PIDFILE
        return "$RETVAL"
}

case "$1" in
  start)
        [ "$VERBOSE" != no ] && log_daemon_msg "Starting $DESC" "$NAME"
# JVe additions 2 start
        rsync -qa --delete $DISKFOLDER $RAMFOLDER
# JVe additions 2 end
        do_start
        case "$?" in
                0|1) [ "$VERBOSE" != no ] && log_end_msg 0 ;;
                2) [ "$VERBOSE" != no ] && log_end_msg 1 ;;
        esac
        ;;
  stop)
        [ "$VERBOSE" != no ] && log_daemon_msg "Stopping $DESC" "$NAME"
        do_stop
# JVe additions 3 start
        RETVAL="$?"
        rsync -qa --delete $RAMFOLDER $DISKFOLDER 
#        case "$?" in
        case "$RETVAL" in
#        case "$?" in
# JVe additions 3 end
                0|1) [ "$VERBOSE" != no ] && log_end_msg 0 ;;
                2) [ "$VERBOSE" != no ] && log_end_msg 1 ;;
        esac
        ;;
  status)
        status_of_proc "$DAEMON" "$NAME" && exit 0 || exit $?
        ;;
  reload)
        log_daemon_msg "Reloading $DESC" "$NAME"
        PID=$(pidof_domoticz) || true
        if [ "${PID}" ]; then
                kill -HUP $PID
                log_end_msg 0
        else
                log_end_msg 1
        fi
        ;;
  restart)
        log_daemon_msg "Restarting $DESC" "$NAME"
        do_stop
# JVe additions 4 ( = 3 ) start
        RETVAL="$?"
        rsync -qa --delete $RAMFOLDER $DISKFOLDER 
#        case "$?" in
        case "$RETVAL" in
#        case "$?" in
# JVe additions 4 ( = 3 ) end
          0|1)
# JVe additions 5 ( = 2 ) start
                rsync -qa --delete $DISKFOLDER $RAMFOLDER
# JVe additions 5 ( = 2 ) end
                do_start
                case "$?" in
                        0) log_end_msg 0 ;;
                        1) log_end_msg 1 ;; # Old process is still running
                        *) log_end_msg 1 ;; # Failed to start
                esac
                ;;
          *)
                # Failed to stop
                log_end_msg 1
                ;;
        esac
        ;;
  *)
        echo "Usage: $SCRIPTNAME {start|stop|status|restart|reload}" >&2
        exit 3
        ;;
esac

:

-----------------------------------------------------------------------------------------

# After saving the file we need to tell the system that we did :

sudo systemctl daemon-reload

# Look into your domoticz folder :

ls domoticz

# ( nothing there yet :-) 

sudo systemctl start domoticz

ls domoticz


# And now you should see your files.


# A stop of the service will copy the ramdisk to your Domoticz_disk_copy folder.
# A restart/reboot will do that too and also copy it back to the ramdisk.

# To save data on a regular basis you may want to create a crontab job.
